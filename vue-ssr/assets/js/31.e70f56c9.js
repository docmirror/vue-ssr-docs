(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{193:function(e,t,r){"use strict";r.r(t);var _=r(0),s=Object(_.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[e._v('サーバサイドの描画について、さらに見ていく前に、"ユニバーサル"なコード(サーバーとクライアントの両方で動作するコード)を記述するときの制約について考えてみましょう。ユースケースとプラットフォームの API の相違により、異なる環境で実行したコードの動作は全く同じものにはなりません。ここでは、サーバサイドの描画を行う上で、知っておく必要がある重要な項目について説明します。')]),e._v(" "),e._m(1),e._v(" "),r("p",[e._v("クライアントだけで実行するアプリでは、全てのユーザーがブラウザでアプリケーションの新しいインスタンスを使用します。サーバサイドの描画でも、同じ振る舞いが必要とされます: すなわち、複数のリクエストに跨った状態の汚染がないよう各リクエストは新しく独立したアプリケーションのインスタンスが必要になります。")]),e._v(" "),r("p",[e._v('実際の描画プロセスは決定的であることが求められるので、サーバー上でデータを"プリフェッチ"することもあります。これは描画を開始する時、アプリケーションの状態は既に解決済みであることを意味します。つまり、サーバー上では、データがリアクティブである必要はないので、デフォルトで無効になっています。データをリアクティブにしないことで、データをリアクティブなオブジェクトに変換する際のパフォーマンスコストを無視できます。')]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),r("p",[e._v("サーバーとクライアントでコードを共有するものの、タスクが使用する API がプラットフォームによって異なる場合は、プラットフォーム固有の実装を ユニバーサル な API の内部でラップするか、それを行うライブラリを使用することをお勧めします。例えば、"),r("a",{attrs:{href:"https://github.com/mzabriskie/axios",target:"_blank",rel:"noopener noreferrer"}},[e._v("axios"),r("OutboundLink")],1),e._v(" は、サーバーとクライアントの両方に同じ API を提供する HTTP クライアントです。")]),e._v(" "),r("p",[e._v("ブラウザ  API を利用する際の一般的なアプローチは、クライアントだけで実行されるライフサイクルの中で遅延的にアクセスすることです。")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),r("p",[e._v("ほとんどの カスタムディレクティブ は直接 DOM を操作するため、SSR 中にエラーが発生します。これを回避するには、2つの方法があります:")]),e._v(" "),r("ol",[r("li",[e._v("抽象化の仕組みとしてコンポーネントを使用し、カスタムディレクティブの代わりに仮想 DOM レベル（例えば、render 関数を使用すること)で実装することをお勧めします。")]),e._v(" "),r("li",[e._v("コンポーネントに簡単に置き換えができないカスタムディレクティブの場合、サーバーレンダラを生成する際の "),r("router-link",{attrs:{to:"./../api/#directives"}},[r("code",[e._v("directives")])]),e._v(' オプションを使用して、そのオプションの "サーバーサイドのバージョン" を用意することで回避できます。')],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"ユニバーサルなコードを書く"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ユニバーサルなコードを書く","aria-hidden":"true"}},[this._v("#")]),this._v(" ユニバーサルなコードを書く")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"サーバー上でのデータリアクティビテイ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#サーバー上でのデータリアクティビテイ","aria-hidden":"true"}},[this._v("#")]),this._v(" サーバー上でのデータリアクティビテイ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"コンポーネントのライフサイクルフック"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#コンポーネントのライフサイクルフック","aria-hidden":"true"}},[this._v("#")]),this._v(" コンポーネントのライフサイクルフック")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("動的な更新がないので、ライフサイクルフックのうち、"),r("code",[e._v("beforeCreate")]),e._v(" と "),r("code",[e._v("created")]),e._v(" のみが SSR 中に呼び出されます。つまり、 "),r("code",[e._v("beforeMount")]),e._v(" や "),r("code",[e._v("mounted")]),e._v(" などの他のコンポーネントサイクルフックは、クライアントでのみ実行されます。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("注意すべきもう一つは、"),r("code",[e._v("beforeCreate")]),e._v(" と "),r("code",[e._v("created")]),e._v(" において、例えば  "),r("code",[e._v("setInterval")]),e._v(" でタイマーを設定するような、グローバルな副作用を引き起こすコード避けるべきです。クライアントサイドのみのコードでは、タイマーを設定してから "),r("code",[e._v("beforeDestroy")]),e._v(" または "),r("code",[e._v("destroyed")]),e._v(" したりすることができます。しかしながら、SSR 中に破棄フックは呼び出されないため、タイマーは永遠に残ります。 これを回避するために、代わりに副作用コードを "),r("code",[e._v("beforeMount")]),e._v(" または "),r("code",[e._v("mounted")]),e._v(" に移動してください。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"プラットフォーム固有の-api-にアクセスする"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#プラットフォーム固有の-api-にアクセスする","aria-hidden":"true"}},[this._v("#")]),this._v(" プラットフォーム固有の API にアクセスする")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("ユニバーサルコードでは、プラットフォーム固有の API へのアクセスは想定されていないので、"),t("code",[this._v("window")]),this._v(" や "),t("code",[this._v("document")]),this._v(" といったブラウザ環境のグローバル変数を直接使用すると、Node.js ではエラーが発生します。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("サードパーティライブラリがユニバーサルに使用することを考慮していない場合、それをサーバサイドによって描画されるアプリケーションに統合することは難しいので注意してください。グローバル変数のいくつかをモックすることで動かすことができるようになる "),t("em",[this._v("かも")]),this._v("しれませんが、それはハックであり、他のライブラリの環境検出のコードを妨げる恐れがあります。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"カスタムディレクティブ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#カスタムディレクティブ","aria-hidden":"true"}},[this._v("#")]),this._v(" カスタムディレクティブ")])}],!1,null,null,null);s.options.__file="universal.md";t.default=s.exports}}]);